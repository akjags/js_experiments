{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nconst info = <const>{\n  name: \"image-keyboard-response\",\n  parameters: {\n    /** The image to be displayed */\n    stimulus: {\n      type: ParameterType.IMAGE,\n      pretty_name: \"Stimulus\",\n      default: undefined,\n    },\n    /** Set the image height in pixels */\n    stimulus_height: {\n      type: ParameterType.INT,\n      pretty_name: \"Image height\",\n      default: null,\n    },\n    /** Set the image width in pixels */\n    stimulus_width: {\n      type: ParameterType.INT,\n      pretty_name: \"Image width\",\n      default: null,\n    },\n    /** Maintain the aspect ratio after setting width or height */\n    maintain_aspect_ratio: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Maintain aspect ratio\",\n      default: true,\n    },\n    /** Array containing the key(s) the subject is allowed to press to respond to the stimulus. */\n    choices: {\n      type: ParameterType.KEYS,\n      pretty_name: \"Choices\",\n      default: \"ALL_KEYS\",\n    },\n    /** Any content here will be displayed below the stimulus. */\n    prompt: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Prompt\",\n      default: null,\n    },\n    /** How long to show the stimulus. */\n    stimulus_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Stimulus duration\",\n      default: null,\n    },\n    /** How long to show trial before it ends */\n    trial_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Trial duration\",\n      default: null,\n    },\n    /** If true, trial will end when subject makes a response. */\n    response_ends_trial: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Response ends trial\",\n      default: true,\n    },\n    /**\n     * If true, the image will be drawn onto a canvas element (prevents blank screen between consecutive images in some browsers).\n     * If false, the image will be shown via an img element.\n     */\n    render_on_canvas: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Render on canvas\",\n      default: true,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * **image-keyboard-response**\n *\n * jsPsych plugin for displaying an image stimulus and getting a keyboard response\n *\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/plugins/jspsych-image-keyboard-response/ image-keyboard-response plugin documentation on jspsych.org}\n */\nclass ImageKeyboardResponsePlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    var height, width;\n    if (trial.render_on_canvas) {\n      var image_drawn = false;\n      // first clear the display element (because the render_on_canvas method appends to display_element instead of overwriting it with .innerHTML)\n      if (display_element.hasChildNodes()) {\n        // can't loop through child list because the list will be modified by .removeChild()\n        while (display_element.firstChild) {\n          display_element.removeChild(display_element.firstChild);\n        }\n      }\n      // create canvas element and image\n      var canvas = document.createElement(\"canvas\");\n      canvas.id = \"jspsych-image-keyboard-response-stimulus\";\n      canvas.style.margin = \"0\";\n      canvas.style.padding = \"0\";\n      var ctx = canvas.getContext(\"2d\");\n      var img = new Image();\n      img.onload = () => {\n        // if image wasn't preloaded, then it will need to be drawn whenever it finishes loading\n        if (!image_drawn) {\n          getHeightWidth(); // only possible to get width/height after image loads\n          ctx.drawImage(img, 0, 0, width, height);\n        }\n      };\n      img.src = trial.stimulus;\n      // get/set image height and width - this can only be done after image loads because uses image's naturalWidth/naturalHeight properties\n      const getHeightWidth = () => {\n        if (trial.stimulus_height !== null) {\n          height = trial.stimulus_height;\n          if (trial.stimulus_width == null && trial.maintain_aspect_ratio) {\n            width = img.naturalWidth * (trial.stimulus_height / img.naturalHeight);\n          }\n        } else {\n          height = img.naturalHeight;\n        }\n        if (trial.stimulus_width !== null) {\n          width = trial.stimulus_width;\n          if (trial.stimulus_height == null && trial.maintain_aspect_ratio) {\n            height = img.naturalHeight * (trial.stimulus_width / img.naturalWidth);\n          }\n        } else if (!(trial.stimulus_height !== null && trial.maintain_aspect_ratio)) {\n          // if stimulus width is null, only use the image's natural width if the width value wasn't set\n          // in the if statement above, based on a specified height and maintain_aspect_ratio = true\n          width = img.naturalWidth;\n        }\n        canvas.height = height;\n        canvas.width = width;\n      };\n      getHeightWidth(); // call now, in case image loads immediately (is cached)\n      // add canvas and draw image\n      display_element.insertBefore(canvas, null);\n      if (img.complete && Number.isFinite(width) && Number.isFinite(height)) {\n        // if image has loaded and width/height have been set, then draw it now\n        // (don't rely on img onload function to draw image when image is in the cache, because that causes a delay in the image presentation)\n        ctx.drawImage(img, 0, 0, width, height);\n        image_drawn = true;\n      }\n      // add prompt if there is one\n      if (trial.prompt !== null) {\n        display_element.insertAdjacentHTML(\"beforeend\", trial.prompt);\n      }\n    } else {\n      // display stimulus as an image element\n      var html = '<img src=\"' + trial.stimulus + '\" id=\"jspsych-image-keyboard-response-stimulus\">';\n      // add prompt\n      if (trial.prompt !== null) {\n        html += trial.prompt;\n      }\n      // update the page content\n      display_element.innerHTML = html;\n\n      // set image dimensions after image has loaded (so that we have access to naturalHeight/naturalWidth)\n      var img = display_element.querySelector(\n        \"#jspsych-image-keyboard-response-stimulus\"\n      ) as HTMLImageElement;\n      if (trial.stimulus_height !== null) {\n        height = trial.stimulus_height;\n        if (trial.stimulus_width == null && trial.maintain_aspect_ratio) {\n          width = img.naturalWidth * (trial.stimulus_height / img.naturalHeight);\n        }\n      } else {\n        height = img.naturalHeight;\n      }\n      if (trial.stimulus_width !== null) {\n        width = trial.stimulus_width;\n        if (trial.stimulus_height == null && trial.maintain_aspect_ratio) {\n          height = img.naturalHeight * (trial.stimulus_width / img.naturalWidth);\n        }\n      } else if (!(trial.stimulus_height !== null && trial.maintain_aspect_ratio)) {\n        // if stimulus width is null, only use the image's natural width if the width value wasn't set\n        // in the if statement above, based on a specified height and maintain_aspect_ratio = true\n        width = img.naturalWidth;\n      }\n      img.style.height = height.toString() + \"px\";\n      img.style.width = width.toString() + \"px\";\n    }\n\n    // store response\n    var response = {\n      rt: null,\n      key: null,\n    };\n\n    // function to end trial when it is time\n    const end_trial = () => {\n      // kill any remaining setTimeout handlers\n      this.jsPsych.pluginAPI.clearAllTimeouts();\n\n      // kill keyboard listeners\n      if (typeof keyboardListener !== \"undefined\") {\n        this.jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\n      }\n\n      // gather the data to store for the trial\n      var trial_data = {\n        rt: response.rt,\n        stimulus: trial.stimulus,\n        response: response.key,\n      };\n\n      // clear the display\n      display_element.innerHTML = \"\";\n\n      // move on to the next trial\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    // function to handle responses by the subject\n    var after_response = (info) => {\n      // after a valid response, the stimulus will have the CSS class 'responded'\n      // which can be used to provide visual feedback that a response was recorded\n      display_element.querySelector(\"#jspsych-image-keyboard-response-stimulus\").className +=\n        \" responded\";\n\n      // only record the first response\n      if (response.key == null) {\n        response = info;\n      }\n\n      if (trial.response_ends_trial) {\n        end_trial();\n      }\n    };\n\n    // start the response listener\n    if (trial.choices != \"NO_KEYS\") {\n      var keyboardListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n        callback_function: after_response,\n        valid_responses: trial.choices,\n        rt_method: \"performance\",\n        persist: false,\n        allow_held_key: false,\n      });\n    }\n\n    // hide stimulus if stimulus_duration is set\n    if (trial.stimulus_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(() => {\n        display_element.querySelector<HTMLElement>(\n          \"#jspsych-image-keyboard-response-stimulus\"\n        ).style.visibility = \"hidden\";\n      }, trial.stimulus_duration);\n    }\n\n    // end trial if trial_duration is set\n    if (trial.trial_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(() => {\n        end_trial();\n      }, trial.trial_duration);\n    } else if (trial.response_ends_trial === false) {\n      console.warn(\n        \"The experiment may be deadlocked. Try setting a trial duration or set response_ends_trial to true.\"\n      );\n    }\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    if (data.rt !== null) {\n      this.jsPsych.pluginAPI.pressKey(data.response, data.rt);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const default_data = {\n      stimulus: trial.stimulus,\n      rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n      response: this.jsPsych.pluginAPI.getValidKey(trial.choices),\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n}\n\nexport default ImageKeyboardResponsePlugin;\n"],"names":["info","name","parameters","stimulus","type","ParameterType","IMAGE","pretty_name","default","undefined","stimulus_height","INT","stimulus_width","maintain_aspect_ratio","BOOL","choices","KEYS","prompt","HTML_STRING","stimulus_duration","trial_duration","response_ends_trial","render_on_canvas","ImageKeyboardResponsePlugin","jsPsych","_classCallCheck","this","key","value","display_element","trial","height","width","_this","image_drawn","hasChildNodes","firstChild","removeChild","canvas","document","createElement","id","style","margin","padding","ctx","getContext","img","Image","onload","getHeightWidth","drawImage","src","naturalWidth","naturalHeight","insertBefore","complete","Number","isFinite","insertAdjacentHTML","html","innerHTML","querySelector","toString","response","rt","end_trial","pluginAPI","clearAllTimeouts","keyboardListener","cancelKeyboardResponse","trial_data","finishTrial","getKeyboardResponse","callback_function","className","valid_responses","rt_method","persist","allow_held_key","setTimeout","visibility","console","warn","simulation_mode","simulation_options","load_callback","simulate_data_only","simulate_visual","data","create_simulation_data","getDisplayElement","pressKey","default_data","randomization","sampleExGaussian","getValidKey","mergeSimulationData","ensureSimulationDataConsistency"],"mappings":"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"}